{"version":3,"sources":["pages/NotFound/NotFound.js","components/Message.js","components/Chat/Chat.js","pages/Home/Home.js","sockets/index.js","App.js","serviceWorker.js","index.js"],"names":["NotFound","react_default","a","createElement","className","Message","props","username","message","Chat","useEffect","toaster","closeAll","success","socket","on","msg","setListMessage","listMessage","concat","Object","toConsumableArray","messageFocus","current","scrollTop","scrollHeight","_useState","useState","_useState2","slicedToArray","setMessage","_useState3","_useState4","useRef","emitEvent","e","preventDefault","emit","ref","map","n","index","components_Message","id","onSubmit","TextInput","onChange","target","value","Button","marginLeft","iconAfter","Home","setUsername","isAuth","setIsAuth","checkUsername","event","undefined","danger","Chat_Chat","placeholder","io","connect","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","BrowserRouter","Fragment","Switch","Route","exact","path","render","Home_Home","component","Component","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b143a36d.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\n\r\nfunction NotFound() {\r\n\r\n    return(\r\n        <div className=\"NotFound\">\r\n            <h1> Not Found </h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NotFound;","import React, {useState, useEffect} from 'react';\r\nimport { toaster } from 'evergreen-ui';\r\n\r\nfunction Message(props){\r\n\r\n    return(\r\n        <div className=\"Message\">\r\n            <p>{props.username} : {props.message}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React, { useState, useEffect, useRef} from 'react';\r\nimport Message from '../Message';\r\nimport { TextInput, Button, toaster } from 'evergreen-ui';\r\n\r\nfunction Chat(props) {\r\n\r\n    useEffect(() => {\r\n        toaster.closeAll()\r\n        toaster.success('Vous êtes connecté au Chat')\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        socket.on('newMessage', (msg) => {\r\n            setListMessage(listMessage => [...listMessage, msg])\r\n            messageFocus.current.scrollTop = messageFocus.current.scrollHeight;\r\n        })\r\n    }, [])\r\n\r\n    const socket = props.socket;\r\n\r\n    const username = props.username;\r\n\r\n    const [ message, setMessage ] = useState('');\r\n\r\n    const [listMessage, setListMessage] = useState([]);\r\n\r\n    const messageFocus = useRef(null);\r\n\r\n    function emitEvent(e){\r\n        e.preventDefault();\r\n        socket.emit(`newMessage`, {username,message}); \r\n        setMessage('');\r\n    }\r\n\r\n\r\n    return(\r\n        <div className=\"Chat\">\r\n            <div className=\"MessagesDisplayer\" ref={messageFocus}>\r\n                { listMessage.map( (n, index) => {\r\n                    return(<Message username={n.username} message={n.message} id={index} />)\r\n                }) }\r\n            </div>\r\n            <form className=\"MessageWritting\"  onSubmit={emitEvent}>\r\n                <TextInput onChange={(e) => setMessage(e.target.value)} value={message} className=\"MessageInput\"/>\r\n                <div>\r\n                    <Button onSubmit={emitEvent} marginLeft={10} iconAfter=\"direction-right\" className=\"SendMessage\">Envoyer</Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;","import React, { useState } from 'react';\r\nimport Chat from '../../components/Chat/Chat';\r\nimport { Button, TextInput, toaster } from 'evergreen-ui';\r\n\r\nfunction Home(props){\r\n\r\n    const [username, setUsername] = useState('');\r\n\r\n    const [isAuth, setIsAuth] = useState(false);\r\n\r\n    function checkUsername(event){\r\n        event.preventDefault()\r\n        return username === '' || username === undefined\r\n            ? toaster.danger(\"Le champ 'Pseudo' est vide.\")\r\n            : (toaster.closeAll(),setIsAuth(true))\r\n    }\r\n\r\n    return isAuth \r\n        ? \r\n            <Chat socket={props.socket} username={username} />\r\n        : \r\n            (\r\n                <div className=\"Home\">\r\n                    <div>\r\n                        <h1>FoxStudio - React & Socket.io chat</h1>\r\n                    </div>\r\n                    <form onSubmit={checkUsername}>\r\n                        <TextInput placeholder='Votre Pseudo' onChange={ (e) => setUsername(e.target.value) } />\r\n                        <Button onSubmit={checkUsername} marginLeft={10} iconAfter=\"arrow-right\">Entrer dans le chat</Button>\r\n                    </form>\r\n                </div>\r\n            ) \r\n}\r\n\r\nexport default Home;","import io from 'socket.io-client';\r\n\r\nconst socket = io.connect('http://localhost:3001/')\r\n\r\nexport default socket","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\r\n\r\nimport NotFound from './pages/NotFound/NotFound';\r\nimport Home from './pages/Home/Home';\r\n\r\nimport socket from './sockets/index.js';\r\n \r\nclass App extends Component {\r\n  constructor(){\r\n    super();\r\n    this.state = {}\r\n  }\r\n\r\n  componentDidMount(){\r\n    this.socket = socket\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n            <React.Fragment>\r\n              <Switch>\r\n                <Route exact={true} path=\"/\" render={ () => (<Home socket={socket} />) } />\r\n                <Route path=\"/**\" component={NotFound}/>\r\n              </Switch>\r\n            </React.Fragment>\r\n        </BrowserRouter>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.sass';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}